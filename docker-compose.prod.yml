services:
  # Nats Server
  nats-server:
    image: nats:latest
    ports:
      - ${NATS_SERVER_PORT}:8222

  # Cliente Gateway
  client-gateway:
    build:
      context: ./client-gateway
      dockerfile: dockerfile.prod
    image: client-gateway
    # image: <docker register>client-gateway
    restart: always
    ports:
      - ${CLIENT_GATEWAY_OUTPORT}:${CLIENT_GATEWAY_INPORT}
    environment:
      - PORT=${CLIENT_GATEWAY_INPORT}
      - NATS_SERVERS=${NATS_SERVERS}

  # Authentication Application
  authentication-ms:
    build:
      context: ./authentication-ms
      dockerfile: dockerfile.prod
    image: authentication-ms
    ports:
      - ${AUTH_MS_OUTPORT}:${AUTH_MS_INPORT}
    environment:
      - PORT=${AUTH_MS_INPORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - DATABASE_URL=${AUTH_MS_DATABASE_URL}
      - JWT_SECRET=${AUTH_MS_JWT_SECRET}

  # Product Application
  products-ms:
    build:
      context: ./products-ms
      dockerfile: dockerfile.prod
    image: products-ms
    restart: always
    environment:
      - PORT=${PRODUCTS_MS_INPORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - DATABASE_URL=${PRODUCTS_MS_DATABASE_URL}

  # Order Application
  orders-ms:
    build:
      context: ./orders-ms
      dockerfile: dockerfile.prod
      args:
        - ORDER_MS_DATABASE_URL=${ORDER_MS_DATABASE_URL}
    restart: always
    environment:
      - PORT=${ORDER_MS_INPORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - DATABASE_URL=${ORDER_MS_DATABASE_URL}
    depends_on:
      - orders-db

  # Payment Application
  payments-ms:
    build:
      context: ./payments-ms
      dockerfile: dockerfile.prod
    image: payments-ms
    restart: always
    ports:
      - ${PAYMENT_MS_OUTPORT}:${PAYMENT_MS_INPORT}
    environment:
      - PORT=${PAYMENT_MS_INPORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - STRIPE_SECRET=${PAYMENT_MS_STRIPE_SECRET}
      - STRIPE_SUCCESS_URL=${PAYMENT_MS_STRIPE_SUCCESS_URL}
      - STRIPE_CANCEL_URL=${PAYMENT_MS_STRIPE_CANCEL_URL}
      - STRIPE_ENDPOINT_SECRET=${PAYMENT_MS_STRIPE_ENDPOINT_SECRET}

  # Order Database
  orders-db:
    container_name: orders_database
    image: postgres:16.2
    restart: always
    volumes:
      - ./orders-ms/postgres:/var/lib/postgresql/data
    ports:
      - ${ORDER_DATABASE_POSTGRES_OUTPORT}:5432
    environment:
      - POSTGRES_USER=${ORDER_DATABASE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${ORDER_DATABASE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${ORDER_DATABASE_POSTGRES_DB}

  # Authentication Database
  authentication-db:
    image: mongo:latest
    restart: always
    ports:
      - ${AUTH_DATABASE_MONGO_OUTPORT}:27017
    volumes:
      - ./authentication-ms/mongo:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${AUTH_DATABASE_MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${AUTH_DATABASE_MONGO_PASSWORD}
